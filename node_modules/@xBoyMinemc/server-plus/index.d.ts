import {Entity,EntityDamageCause,EntityEventOptions} from "@minecraft/server"


export class World {

    /**
     * Contains a set of events that are applicable to the entirety
     * of the world.
     */
     readonly events: Events;
}

export class Events {
    /**
     * xBoyMinemc
     * This event fires when an entity dead by hurt (takes damage).
     */
     entityDeadByHurt: EntityDeadByHurtSignal;
    /**
    * xBoyMinemc
    * This event fires when an FishingHook spawned.
    */
     fishingHookSpawned: FishingHookSpawnedEventSignal;
    /**
    * xBoyMinemc
    * This event fires when an FishingHook despawned.
    */
     fishingHookDespawned: FishingHookDespawnedEventSignal;
}
/**
 * xBoyMinemc
 * Manages callbacks that are connected to when an entity dead by hurt.
 */
export class EntityDeadByHurtSignal {
    /**
     * @remarks
     * Adds a callback that will be called when an entity is  dead by hurt.
     * @param callback
     * @param options
     */
    subscribe(callback: (arg: EntityDeadByHurt) => void, options?: EntityEventOptions): (arg: EntityDeadByHurt) => void;
    /**
     * @remarks
     * Removes a callback from being called when an entity is dead by hurt.
     * @param callback
     * @throws This function can throw errors.
     */
    unsubscribe(callback: (arg: EntityDeadByHurt) => void): void;
    trigger(EntityDeadByHurt:EntityDeadByHurt): void;
    protected constructor();
}
/**
 * Contains information related to an entity getting dead by
 * another entity.
 */
 export class EntityDeadByHurt {
    /**
     * A summary of the reason that damage was caused.
     */
    readonly cause: EntityDamageCause;
    /**
     * Describes the amount of damage caused.
     */
    readonly damage: number;
    /**
     * Optional entity that caused the damaging attack, or
     * undefined if the hurt reason was not because of another
     * entity.
     */
    readonly damagingEntity: Entity;
    /**
     * Entity that was Dead.
     */
    readonly hurtEntity: Entity;
    /**
     * Optional entity for a projectile that potentially hurt an
     * entity.
     */
    readonly projectile: Entity;
    protected constructor();
}

/**
 * xBoyMinemc
 * Manage callback that are triggered to when new FishingHook spawned.
 */
 export class FishingHookSpawnedEventSignal {
    /**
     * @remarks
     * Adds a callback that will be called when a FishingHook spawned.
     * @param callback
     * @param options
     */
    subscribe(callback: (arg: FishingHookSpawnedEvent) => void, options?: EntityEventOptions): (arg: FishingHookSpawnedEvent) => void;
    /**
     * @remarks
     * Removes a callback from being called when a FishingHook spawned.
     * @param callback
     * @throws This function can throw errors.
     */
    unsubscribe(callback: (arg: FishingHookSpawnedEvent) => void): void;
    trigger(FishingHookSpawnedEvent:FishingHookSpawnedEvent): void;
    protected constructor();
}
/**
 * xBoyMinemc
 * Manage callback that are triggered to when FishingHook Despawned.
 */
 export class FishingHookDespawnedEventSignal {
    /**
     * @remarks
     * Adds a callback that will be called when a FishingHook Despawned.
     * @param callback
     */
    subscribe(callback: (arg: FishingHookDespawnedEvent) => void, options?: EntityEventOptions): (arg: FishingHookDespawnedEvent) => void;
    /**
     * @remarks
     * Removes a callback from being called when a FishingHook Despawned.
     * @param callback
     */
    unsubscribe(callback: (arg: FishingHookDespawnedEvent) => void): void;
    trigger(FishingHookDespawnedEvent:FishingHookDespawnedEvent): void;
    protected constructor();
}

// /**
//  * Manage callback that are triggered to when new FishingHook created.
//  */
//  export class EntityCreateEventSignal {
//     subscribe(callback: (arg: EntityCreateEvent) => void): (arg: EntityCreateEvent) => void;
//     unsubscribe(callback: (arg: EntityCreateEvent) => void): void;
//     trigger(EntityDeadByHurt:EntityDeadByHurt): void;
// }
export class FishingHookSpawnedEvent {
    /**
     * New FishingHook that was created.
     */
    entity: Entity;
    protected constructor();
}
export class FishingHookDespawnedEvent {
    /**
     * New FishingHook that was created.
     */
    entity: Entity;
    protected constructor();
}