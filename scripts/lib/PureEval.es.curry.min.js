const summon = (total, fn) => {
    const summoner = (...args) => fn.apply(null, args);
    Reflect.defineProperty(summoner, "length", { value: total });
    return summoner;
};
const curry = (fun) => {
    if (fun.length < 2 || fun.origin)
        return fun;
    const result = summon(fun.length, (...args) => args.length >= fun.length ? fun.apply(null, args) : curry(fun.bind(null, ...args)));
    result.origin = fun;
    return result;
};
const uncurry = (fun) => fun.origin;
export default curry;
